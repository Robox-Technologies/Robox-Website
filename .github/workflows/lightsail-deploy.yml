name: Deploy to AWS Lightsail on merge
on:
  push:
    branches:
      - master
      - feature/lightsail-deploy-action
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: Production

    permissions: {}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Whitelist Runner IP
        id: add_ip
        run: |
          # Get the public IP of the current runner and add /32 for CIDR notation
          RUNNER_IP=$(curl -s https://api.ipify.org)/32
          echo "Adding runner IP $RUNNER_IP to firewall..."

          # Store the IP as an output for the cleanup step
          echo "ip=$RUNNER_IP" >> "$GITHUB_OUTPUT"
          
          # Add this IP to the Lightsail firewall for port 22
          aws lightsail open-instance-public-ports \
            --instance-name "${{ secrets.AWS_INSTANCE_NAME }}" \
            --port-info fromPort=22,toPort=22,protocol=TCP,cidrs=$RUNNER_IP
      
      - name: Deploy to AWS Lightsail
        uses: appleboy/ssh-action@2ead5e36573f08b82fbfce1504f1a4b05a647c6f
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull and update dependencies
            cd ~/Robox-Website-2
            git pull origin master
            npm install

            # Create .env file
            touch .env
          
            echo STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }} > .env
            echo STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} >> .env
            echo FORCE_CACHE=${{ vars.FORCE_CACHE }} >> .env
            
            echo STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }} >> .env
            echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
            echo EMAIL_PORT=${{ secrets.EMAIL_PORT }} >> .env
            echo EMAIL_SECURE=${{ vars.EMAIL_SECURE }} >> .env
            echo EMAIL_USER=${{ secrets.EMAIL_USER }} >> .env
            echo EMAIL_PASS=${{ secrets.EMAIL_PASS }} >> .env

            cat .env

            # Compile and deploy
            tsc -p tsconfig.server.json
            webpack --config build/server/webpack.config.js
            pm2 delete server 2> /dev/null || true
            pm2 start ./build/server/server.js --name "server"
      
      - name: Remote Runner IP Whitelist
        # Ensure step runs regardless of if SSH step fails
        if: always()
        run: |
          echo "Removing runner IP from firewall..."
          aws lightsail close-instance-public-ports \
            --instance-name "${{ secrets.AWS_INSTANCE_NAME }}" \
            --port-info fromPort=22,toPort=22,protocol=TCP,cidrs=${{ steps.add_ip.outputs.ip }}